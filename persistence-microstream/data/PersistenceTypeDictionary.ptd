0000000000000000001 byte{
	primitive 8 bit integer signed,
}
0000000000000000002 boolean{
	primitive 8 bit boolean,
}
0000000000000000003 short{
	primitive 16 bit integer signed,
}
0000000000000000004 char{
	primitive 16 bit integer unicode,
}
0000000000000000005 int{
	primitive 32 bit integer signed,
}
0000000000000000006 float{
	primitive 32 bit decimal IEEE754,
}
0000000000000000007 long{
	primitive 64 bit integer signed,
}
0000000000000000008 double{
	primitive 64 bit decimal IEEE754,
}
0000000000000000010 java.lang.Object{}
0000000000000000011 java.lang.Byte{
	byte value,
}
0000000000000000012 java.lang.Boolean{
	boolean value,
}
0000000000000000013 java.lang.Short{
	short value,
}
0000000000000000014 java.lang.Character{
	char value,
}
0000000000000000015 java.lang.Integer{
	int value,
}
0000000000000000016 java.lang.Float{
	float value,
}
0000000000000000017 java.lang.Long{
	long value,
}
0000000000000000018 java.lang.Double{
	double value,
}
0000000000000000019 java.lang.Void{}
0000000000000000030 java.lang.String{
	[char] value,
}
0000000000000000032 java.lang.StringBuffer{
	long   capacity,
	[char] value   ,
}
0000000000000000033 java.lang.StringBuilder{
	long   capacity,
	[char] value   ,
}
0000000000000000034 java.io.File{
	[char] path,
}
0000000000000000035 java.util.Date{
	long timestamp,
}
0000000000000000037 java.math.BigInteger{
	[byte] value,
}
0000000000000000038 java.math.BigDecimal{
	[char] value,
}
0000000000000000043 java.util.ArrayList{
	long   capacity,
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000044 java.util.HashSet{
	float  loadFactor,
	[list] elements  (
		java.lang.Object element,
	),
}
0000000000000000046 java.util.HashMap{
	float  loadFactor,
	[list] elements  (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000048 java.util.Hashtable{
	float  loadFactor,
	[list] elements  (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000049 java.util.ArrayDeque{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000050 java.util.IdentityHashMap{
	[list] elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000051 java.util.LinkedHashMap{
	float   loadFactor ,
	boolean accessOrder,
	[list]  elements   (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000052 java.util.LinkedHashSet{
	float  loadFactor,
	[list] elements  (
		java.lang.Object element,
	),
}
0000000000000000054 java.util.LinkedList{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000056 java.util.PriorityQueue{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object element,
	),
}
0000000000000000057 java.util.TreeMap{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000058 java.util.TreeSet{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object element,
	),
}
0000000000000000059 java.util.Vector{
	int    capacityIncrement,
	long   capacity         ,
	[list] elements         (
		java.lang.Object element,
	),
}
0000000000000000060 java.util.Stack{
	int    capacityIncrement,
	long   capacity         ,
	[list] elements         (
		java.lang.Object element,
	),
}
0000000000000000061 java.util.Properties{
	java.util.Properties defaults,
	[list]               elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000062 java.util.concurrent.ConcurrentHashMap{
	[list] elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000063 java.util.concurrent.ConcurrentLinkedDeque{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000064 java.util.concurrent.ConcurrentLinkedQueue{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000065 java.util.concurrent.ConcurrentSkipListMap{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000066 java.util.concurrent.ConcurrentSkipListSet{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object element,
	),
}
0000000000000000101 [B{
	[list] elements(
		byte element,
	),
}
0000000000000000102 [Z{
	[list] elements(
		boolean element,
	),
}
0000000000000000103 [S{
	[list] elements(
		short element,
	),
}
0000000000000000104 [C{
	[list] elements(
		char element,
	),
}
0000000000000000105 [I{
	[list] elements(
		int element,
	),
}
0000000000000000106 [F{
	[list] elements(
		float element,
	),
}
0000000000000000107 [J{
	[list] elements(
		long element,
	),
}
0000000000000000108 [D{
	[list] elements(
		double element,
	),
}
0000000000000010000 one.microstream.persistence.lazy.Lazy{
	java.lang.Object subject,
}
0000000000001000001 one.microstream.collections.BulkList{
	long   capacity,
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000006 one.microstream.collections.LimitList{
	long   capacity,
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000007 one.microstream.collections.FixedList{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000008 one.microstream.collections.ConstList{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000009 one.microstream.collections.EqBulkList{
	one.microstream.hashing.HashEqualator hashEqualator,
	long                                  capacity     ,
	[list]                                elements     (
		java.lang.Object element,
	),
}
0000000000001000010 one.microstream.collections.HashEnum{
	float  hashDensity,
	[list] elements   (
		java.lang.Object element,
	),
}
0000000000001000012 one.microstream.collections.ConstHashEnum{
	float  hashDensity,
	[list] elements   (
		java.lang.Object element,
	),
}
0000000000001000013 one.microstream.collections.EqHashEnum{
	one.microstream.hashing.HashEqualator hashEqualator,
	float                                 hashDensity  ,
	[list]                                elements     (
		java.lang.Object element,
	),
}
0000000000001000014 one.microstream.collections.EqConstHashEnum{
	one.microstream.hashing.HashEqualator hashEqualator,
	float                                 hashDensity  ,
	[list]                                elements     (
		java.lang.Object element,
	),
}
0000000000001000015 one.microstream.collections.HashTable{
	one.microstream.collections.HashTable$Keys   keys       ,
	one.microstream.collections.HashTable$Values values     ,
	float                                        hashDensity,
	[list]                                       elements   (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000017 one.microstream.collections.ConstHashTable{
	one.microstream.collections.ConstHashTable$Keys   keys       ,
	one.microstream.collections.ConstHashTable$Values values     ,
	float                                             hashDensity,
	[list]                                            elements   (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000018 one.microstream.collections.EqHashTable{
	one.microstream.hashing.HashEqualator          hashEqualator,
	one.microstream.collections.EqHashTable$Keys   keys         ,
	one.microstream.collections.EqHashTable$Values values       ,
	float                                          hashDensity  ,
	[list]                                         elements     (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000019 one.microstream.collections.EqConstHashTable{
	one.microstream.hashing.HashEqualator               hashEqualator,
	one.microstream.collections.EqConstHashTable$Keys   keys         ,
	one.microstream.collections.EqConstHashTable$Values values       ,
	float                                               hashDensity  ,
	[list]                                              elements     (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000020 one.microstream.util.Substituter$Implementation{
	one.microstream.hashing.HashEqualator hashEqualator,
	float                                 hashDensity  ,
	[list]                                elements     (
		java.lang.Object element,
	),
}
0000000000001000021 one.microstream.persistence.types.PersistenceRoots$Implementation{
	[list] instances  (
		java.lang.Object instance,
	),
	[list] identifiers(
		[char] identifier,
	),
}
0000000000001000022 one.microstream.hashing.XHashing$SingletonValueHashEqualator{}
0000000000001000023 one.microstream.hashing.XHashing$SingletonIdentityHashEqualator{}
0000000000001000024 one.microstream.hashing.XHashing$SingletonKeyValueIdentityHashEqualator{}
0000000000001000025 one.microstream.collections.Empty{}
0000000000001000026 one.microstream.collections.EmptyTable{
	one.microstream.collections.EmptyTable$Keys   one.microstream.collections.EmptyTable#keys  ,
	one.microstream.collections.EmptyTable$Values one.microstream.collections.EmptyTable#values,
}
0000000000001000027 one.microstream.collections.EmptyTable$Keys{
	one.microstream.collections.EmptyTable one.microstream.collections.EmptyTable$Keys#this$0,
}
0000000000001000028 one.microstream.collections.EmptyTable$Values{
	one.microstream.collections.EmptyTable one.microstream.collections.EmptyTable$Values#this$0,
}
0000000000001000029 one.microstream.collections.Singleton{
	java.lang.Object one.microstream.collections.Singleton#element,
}
0000000000001000030 one.microstream.sampler.lazy.DataRoot{
	java.util.List one.microstream.sampler.lazy.DataRoot#orders,
}
0000000000001000031 java.util.List{}
0000000000001000032 one.microstream.sampler.lazy.Order{
	java.lang.String                      one.microstream.sampler.lazy.Order#customer,
	one.microstream.persistence.lazy.Lazy one.microstream.sampler.lazy.Order#items   ,
	one.microstream.persistence.lazy.Lazy one.microstream.sampler.lazy.Order#handler ,
}
0000000000001000033 one.microstream.sampler.lazy.Item{
	java.lang.String one.microstream.sampler.lazy.Item#name  ,
	int              one.microstream.sampler.lazy.Item#amount,
	double           one.microstream.sampler.lazy.Item#price ,
}
